events {
    worker_connections 1024;
}

http {
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=5r/s;

    # IP whitelist
    map $remote_addr $allowed_ip {
        default 0;
        include /etc/nginx/auth-ips.conf;
    }

    # Upstreams
    upstream ipfs_gateway {
        server ipfs:8080;   # IPFS Gateway inside container
    }
    upstream ipfs_api {
        server ipfs:5001;   # IPFS API inside container
    }

    # Public IPFS Gateway (read-only)
    server {
        listen 80;
        server_name ipfs.peaq.xyz;

        # Rate limiting
        limit_req zone=api burst=20 nodelay;

        location /ipfs/ {
            proxy_pass http://ipfs_gateway;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Security headers
            add_header X-Frame-Options DENY;
            add_header X-Content-Type-Options nosniff;
            add_header X-XSS-Protection "1; mode=block";
        }

        location /ipns/ {
            proxy_pass http://ipfs_gateway;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Deny access to API on public host
        location /api/ {
            return 403;
        }
    }

    # Authenticated IPFS API (write access via Basic Auth + IP allowlist)
    server {
        listen 80;
    server_name api-ipfs.peaq.xyz;

        # IP whitelist check
        if ($allowed_ip = 0) {
            return 403 "Access denied: IP not whitelisted";
        }

        # Basic Auth
        auth_basic           "Restricted";
        auth_basic_user_file /etc/nginx/.htpasswd;

        # Rate limiting for uploads
        limit_req zone=upload burst=10 nodelay;

        # Proxy all API endpoints to IPFS API
        location /api/v0/ {
            proxy_pass http://ipfs_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Increase body size for uploads if needed
            client_max_body_size 100m;
        }
    }

    # Redirect HTTP to HTTPS (when SSL is configured)
    # server {
    #     listen 80;
    #     server_name ipfs.peaq.xyz api-ipfs.peaq.xyz;
    #     return 301 https://$server_name$request_uri;
    # }
}