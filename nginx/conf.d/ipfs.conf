# Redirect plain HTTP to HTTPS
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name ipfs.peaq.xyz;
    return 301 https://$host$request_uri;
}

# HTTPS server for IPFS Gateway
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name ipfs.peaq.xyz;

    # TLS: you provide these files at ${NGINX_CERTS_HOST_PATH}
    ssl_certificate     /etc/nginx/certs/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/privkey.pem;

    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
    ssl_prefer_server_ciphers off;

    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options SAMEORIGIN always;
    add_header Referrer-Policy no-referrer-when-downgrade always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

    # Optionally enable OCSP stapling if your cert supports it
    ssl_stapling on;
    ssl_stapling_verify on;

    # Requests control
    client_max_body_size 100m;
    limit_req zone=perip burst=50 nodelay;

    # Proxy to IPFS gateway in the ipfs container (fixed port 8080)
    location / {
        proxy_pass http://ipfs:8080;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 600s;
        proxy_send_timeout 600s;
        proxy_buffering on;
        proxy_buffers 64 64k;
        proxy_busy_buffers_size 256k;
    }

    # Health check endpoint
    location = /healthz { return 200 'ok'; }
}
